/**
 * 84. 柱状图中最大的矩形
 * 给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。
 * 求在该柱状图中，能够勾勒出来的矩形的最大面积。
 * 以上是柱状图的示例，其中每个柱子的宽度为 1，给定的高度为 [2,1,5,6,2,3]。
 * 图中阴影部分为所能勾勒出的最大矩形面积，其面积为 10 个单位。
 * 示例:
 * 输入: [2,1,5,6,2,3]
 * 输出: 10
 * 链接：https://leetcode-cn.com/problems/largest-rectangle-in-histogram
 * 思路：i位置最大的矩形，即找i左边小于i高度的第一个index和i右边小于i高度的第一个index
 * 保持一个单调栈，如果 i < i - 1，i - 1出栈，一直出栈到栈顶高度小于i高度
 */
public class LargestRectangleInHistogram {
    public int largestRectangleArea(int[] heights) {
        if (heights.length == 0) {
            return 0;
        }
        return searchMaxRect(heights);
    }

    private int searchMaxRect(int[] heights) {
        int maxRect = 0;
        Stack<Integer> increasingStack = new Stack<>();
        increasingStack.push(0);
        for (int i = 1; i < heights.length; i++) {
            // 单调递增
            if (heights[i] > heights[i - 1]) {
                increasingStack.push(i);
                continue;
            }
            maxRect = Math.max(maxRect, fixStack(heights, i, increasingStack));
            increasingStack.push(i);
        }
        maxRect = Math.max(maxRect, clearStack(heights, increasingStack));
        return maxRect;
    }

    private int fixStack(int[] heights, int rightIndex, Stack<Integer> increasingStack) {
        if (increasingStack.empty()) {
            return 0;
        }
        int popIndex;
        int maxRect = 0;
        while (!increasingStack.empty()) {
            if (heights[increasingStack.peek()] < heights[rightIndex]) {
                return maxRect;
            }
            popIndex = increasingStack.pop();
            maxRect = Math.max(maxRect, calcRangeMaxRect(increasingStack.empty() ? 0 : increasingStack.peek() + 1, rightIndex - 1, heights[popIndex]));
        }
        return maxRect;
    }

    private int clearStack(int[] heights, Stack<Integer> increasingStack) {
        if (increasingStack.empty()) {
            return 0;
        }
        int maxRect = 0;
        int popIndex;
        while (!increasingStack.empty()) {
            popIndex = increasingStack.pop();
            maxRect = Math.max(maxRect, calcRangeMaxRect(increasingStack.empty() ? 0 : increasingStack.peek() + 1, heights.length - 1, heights[popIndex]));
        }
        return maxRect;
    }

    private int calcRangeMaxRect(int low, int high, int minHeight) {
        return minHeight * (high - low + 1);
    }

    public static void main(String[] args) {
        int[] heights = {2, 1, 5, 6, 2, 3}; // 10
//        int[] heights = {0, 1, 9}; // 9
//        int[] heights = {1, 2, 3, 4, 5}; // 9
//        int[] heights = {0, 1, 0, 2, 1, 0, 1, 3, 2, 1, 2, 1}; // 6
//        int[] heights = {2, 1, 5, 6, 2, 3}; // 10
//        int[] heights = {4, 2, 0, 3, 2, 4, 3, 4}; // 10
//        int[] heights = {3, 6, 5, 7, 4, 8, 1, 0}; // 20
        System.out.println(new LargestRectangleInHistogram().largestRectangleArea(heights));
    }
}
