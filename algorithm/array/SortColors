/**
 * 75. 颜色分类
 * 给定一个包含红色、白色和蓝色，一共 n 个元素的数组，原地对它们进行排序，使得相同颜色的元素相邻，并按照红色、白色、蓝色顺序排列。
 * 此题中，我们使用整数 0、 1 和 2 分别表示红色、白色和蓝色。
 * 注意:
 * 不能使用代码库中的排序函数来解决这道题。
 * 示例:
 * 输入: [2,0,2,1,1,0]
 * 输出: [0,0,1,1,2,2]
 * 进阶：
 * 一个直观的解决方案是使用计数排序的两趟扫描算法。
 * 首先，迭代计算出0、1 和 2 元素的个数，然后按照0、1、2的排序，重写当前数组。
 * 你能想出一个仅使用常数空间的一趟扫描算法吗？
 * 思路: 荷兰国旗例子，划分区域
 * 快排基础的划分区域方式
 */
public class SortColors {

    public void sortColors(int[] nums) {
        int low = -1; // 0 high bound
        int mid = -1; // 1 high bound
        for (int i = 0; i < nums.length; i++) {
            if (nums[i] == 0) {
                exchange(nums, ++low, i);
                mid++;
                // 当且仅当mid不和low为同一索引(即已有1的排序)时和i不为mid时，才可执行交换
                if (mid > low && i > mid) {
                    exchange(nums, mid, i);
                }
                continue;
            }
            // mid的处理很重要
            if (nums[i] == 1) {
                if (mid + 1 == i) {
                    mid = i;
                    continue;
                }
                exchange(nums, ++mid, i);
            }
        }
    }

    // Original site exchange
    private void exchange(int[] nums, int src, int dst) {
        nums[src] = nums[src] ^ nums[dst];
        nums[dst] = nums[dst] ^ nums[src];
        nums[src] = nums[src] ^ nums[dst];
    }

    public static void main(String[] args) {
        int[] nums = {2, 0, 2, 1, 1, 0};
//        int[] nums = {2, 1, 0};
//        int[] nums = {2, 2, 2, 2, 1, 1, 0, 2, 2, 1, 1, 0};
//        int[] nums = {1};
//        int[] nums = {1, 1, 0, 0, 0, 0, 0, 0, 0, 0};
//        int[] nums = {1, 2, 0, 1};
        new SortColors().sortColors(nums);
        System.out.println(Arrays.toString(nums));
    }
}
