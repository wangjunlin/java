/**
 * 1053. 交换一次的先前排列
 * 给你一个正整数的数组 A（其中的元素不一定完全不同），请你返回可在 一次交换（交换两数字 A[i] 和 A[j] 的位置）后得到的、按字典序排列小于 A 的最大可能排列。
 * 如果无法这么操作，就请返回原数组。
 * 示例 1：
 * 输入：[3,2,1]
 * 输出：[3,1,2]
 * 解释：
 * 交换 2 和 1
 * 示例 2：
 * 输入：[1,1,5]
 * 输出：[1,1,5]
 * 解释：
 * 这已经是最小排列
 * 示例 3：
 * 输入：[1,9,4,6,7]
 * 输出：[1,7,4,6,9]
 * 解释：
 * 交换 9 和 7
 * 示例 4：
 * 输入：[3,1,1,3]
 * 输出：[1,3,1,3]
 * 解释：
 * 交换 1 和 3
 * 提示：
 * 1 <= A.length <= 10000
 * 1 <= A[i] <= 10000
 * 思路： 类似nextPermutation，只不过这个是找小于该数的上一个数，寻找小于当前数的最大排列
 * 从右网左遍历，当某个数破坏了降序，则当前index为待交换，与遍历过得数中最大(即<当前index的数)数做交换
 */
public class PreviousPermutationWithOneSwap {

    public int[] prevPermOpt1(int[] A) {
        if (A.length < 1) {
            return A;
        }
        // 记录遍历过得最大数的index
        int maxRecodeIndex = A.length - 1;
        int temp;
        for (int i = A.length - 2; i > -1; i--) {
            if (A[i] == A[i + 1]) {
                continue;
            }
            if (A[i] < A[i + 1]) {
                continue;
            }
            while (maxRecodeIndex > i) {
                if (A[i] <= A[maxRecodeIndex]) {
                    maxRecodeIndex--;
                    continue;
                }
                if (A[maxRecodeIndex] == A[maxRecodeIndex - 1]) {
                    maxRecodeIndex--;
                    continue;
                }
                break;
            }
            temp = A[i];
            A[i] = A[maxRecodeIndex];
            A[maxRecodeIndex] = temp;
            break;
        }
        return A;
    }

    public static void main(String[] args) {
//        int[] A = {1, 9, 4, 6, 7};
//        int[] A = {3, 1, 1, 3};
//        int[] A = {1, 1, 5};
//        int[] A = {3, 2, 1};
        int[] A = {1, 1, 1};
        System.out.println(Arrays.toString(new PreviousPermutationWithOneSwap().prevPermOpt1(A)));
    }
}
