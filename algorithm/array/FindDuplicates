/**
 * 442. 数组中重复的数据
 * 给定一个整数数组 a，其中1 ≤ a[i] ≤ n （n为数组长度）, 其中有些元素出现两次而其他元素出现一次。
 * 找到所有出现两次的元素。
 * 你可以不用到任何额外空间并在O(n)时间复杂度内解决这个问题吗？
 * 示例：
 * 输入:
 * [4,3,2,7,8,2,3,1]
 * 输出:
 * [2,3]
 * <p>
 * 思路: 不用额外空间，则要在原地址修改。基数排序，下界为O(n)，异或算法，a^b=c, a^c=b
 * 如果可以使用额外空间，则基数排序原理
 */
public class FindDuplicates {
    public List<Integer> findDuplicates(int[] nums) {
        List<Integer> res = new ArrayList<>();
        // 采用额外空间，时间复杂度为O(n)
        int[] temp = new int[nums.length];
        for (int num : nums) {
            if (temp[num - 1] == 0) {
                temp[num - 1] += 1;
                continue;
            }
            temp[num - 1] += 1;
            res.add(num);
        }
        // TODO
       /* // 不采用额外空间，时间复杂度为O(n)
        res.clear();
        for (int i = 0; i < nums.length; i++) {

        }*/

        return res;
    }

    public static void main(String... args) {
        int[] nums = {4, 3, 2, 7, 8, 2, 3, 1};
        System.out.println(new FindDuplicates().findDuplicates(nums));
    }
}
