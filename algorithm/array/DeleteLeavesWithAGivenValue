/**
 * 1325. 删除给定值的叶子节点
 * https://leetcode-cn.com/problems/delete-leaves-with-a-given-value/
 * 给你一棵以root为根的二叉树和一个整数target，请你删除所有值为target 的叶子节点 。
 *
 * 注意，一旦删除值为target的叶子节点，它的父节点就可能变成叶子节点；如果新叶子节点的值恰好也是target ，那么这个节点也应该被删除。
 * 也就是说，你需要重复此过程直到不能继续删除。
 *
 * 输入：root = [1,2,3,2,null,2,4], target = 2
 * 输出：[1,null,3,null,4]
 * 解释：
 * 上面左边的图中，绿色节点为叶子节点，且它们的值与 target 相同（同为 2 ），它们会被删除，得到中间的图。
 * 有一个新的节点变成了叶子节点且它的值与 target 相同，所以将再次进行删除，从而得到最右边的图。
 *
 * 输入：root = [1,3,3,3,2], target = 3
 * 输出：[1,3,null,null,2]
 *
 * 输入：root = [1,2,null,2,null,2], target = 2
 * 输出：[1]
 * 解释：每一步都删除一个绿色的叶子节点（值为 2）。
 *
 * 输入：root = [1,1,1], target = 1
 * 输出：[]
 *
 * 输入：root = [1,2,3], target = 1
 * 输出：[1,2,3]
 *
 * 思路: 删除叶子节点，删除后该叶子节点的父节点成为叶子节点，所以也要删除父节点为target值得节点
 *      递归删除root的左右，每次删除后尝试判断自身是否为叶子节点(left,right为Null)，如果是叶子节点则判断是否为target值，
 *      再进行删除操作
 */
public class DeleteLeavesWithAGivenValue {

    public TreeNode removeLeafNodes(TreeNode root, int target) {
        recursiveDeleteNode(root, root.left, target);
        recursiveDeleteNode(root ,root.right, target);
        if (root.left == null && root.right == null && root.val == target) {
            return null;
        }
        return root;
    }

    private void recursiveDeleteNode(TreeNode fatherNode, TreeNode childNode, int target) {
        if (childNode == null) {
            return;
        }
        // Remove left child
        recursiveDeleteNode(childNode, childNode.left, target);
        // Remove right child
        recursiveDeleteNode(childNode, childNode.right, target);
        // Check self node
        tryDeleteSelf(fatherNode, childNode, target);
    }

    private void tryDeleteSelf(TreeNode father, TreeNode node, int target) {
        if (node.left != null || node.right != null) {
            return;
        }
        if (node.val != target) {
            return;
        }
        father.left = father.left == node ? null : father.left;
        father.right = father.right == node ? null : father.right;
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        TreeNode node1 = new TreeNode(2);
        TreeNode node2 = new TreeNode(3);
        TreeNode node3 = new TreeNode(2);
        TreeNode node4 = new TreeNode(2);
        TreeNode node5 = new TreeNode(4);
        root.left = node1;
        root.right = node2;
        node1.left = node3;
        node2.left = node4;
        node2.right = node5;
        int target = 2;
        root = new DeleteLeavesWithAGivenValue().removeLeafNodes(root, target);
        System.out.println(root.val);
    }
}
