/**
 * 121. 买卖股票的最佳时机
 * 给定一个数组，它的第 i 个元素是一支给定股票第 i 天的价格。
 * 如果你最多只允许完成一笔交易（即买入和卖出一支股票一次），设计一个算法来计算你所能获取的最大利润。
 * 注意：你不能在买入股票前卖出股票。
 * 示例 1:
 * 输入: [7,1,5,3,6,4]
 * 输出: 5
 * 解释: 在第 2 天（股票价格 = 1）的时候买入，在第 5 天（股票价格 = 6）的时候卖出，最大利润 = 6-1 = 5 。
 * 注意利润不能是 7-1 = 6, 因为卖出价格需要大于买入价格；同时，你不能在买入前卖出股票。
 * 示例 2:
 * 输入: [7,6,4,3,1]
 * 输出: 0
 * 解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。
 * 思路: 最多一次，则全局搜索最优的差值，用单调栈来做
 */
public class BestTimeToBuyAndSellStock {
    public int maxProfit(int[] prices) {
        int maxPrice = 0;
        Deque<Integer> increaseStack = new ArrayDeque<>(prices.length); // Increasing sell day index stack
        int popIndex;
        for (int sellIndex = 0; sellIndex < prices.length; sellIndex++) {
            if (increaseStack.isEmpty()) {
                increaseStack.push(sellIndex);
                continue;
            }
            if (prices[increaseStack.peek()] <= prices[sellIndex]) {
                increaseStack.push(sellIndex);
                continue;
            }

            while (!increaseStack.isEmpty()) {
                if (prices[increaseStack.peek()] <= prices[sellIndex]) {
                    break;
                }
                popIndex = increaseStack.pop();
                maxPrice = Math.max(maxPrice, prices[popIndex] - (increaseStack.isEmpty() ? prices[popIndex] :
                        prices[increaseStack.peekLast()]));
            }
            increaseStack.push(sellIndex);
        }
        if (!increaseStack.isEmpty() && increaseStack.size() > 1) {
            maxPrice = Math.max(maxPrice, prices[increaseStack.peekFirst()] - prices[increaseStack.peekLast()]);
        }
        return maxPrice;
    }

    public static void main(String[] args) {
//        int[] prices = {7, 1, 5, 3, 6, 4}; // 5
//        int[] prices = {7, 6, 4, 3, 1}; // 0
        int[] prices = {3, 3, 5, 0, 0, 3, 1, 4}; // 4
        System.out.println(new BestTimeToBuyAndSellStock().maxProfit(prices));
    }
}
