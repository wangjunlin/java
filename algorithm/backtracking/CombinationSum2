/**
 * 给定一个数组 candidates 和一个目标数 target ，找出 candidates 中所有可以使数字和为 target 的组合。
 * candidates 中的每个数字在每个组合中只能使用一次。
 * 说明：
 * 所有数字（包括目标数）都是正整数。
 * 解集不能包含重复的组合。
 * <p>
 * 输入: candidates = [10,1,2,7,6,1,5], target = 8,
 * 所求解集为:
 * [
 * [1, 7],
 * [1, 2, 5],
 * [2, 6],
 * [1, 1, 6]
 * ]
 * 输入: candidates = [2,5,2,1,2], target = 5,
 * 所求解集为:
 * [
 * [1,2,2],
 * [5]
 * ]
 * <p>
 * 同理组合总和1，先排序，回溯，条件剪枝
 */
public class CombinationSum2 {
    private int size;
    private int target;

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        size = candidates.length;
        this.target = target;
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> result = new ArrayList<>();
        Arrays.sort(candidates);
        backTracking(candidates, 0, 0, result, results);
        return results;
    }

    private void backTracking(int[] candidates, int total, int index, List<Integer> result, List<List<Integer>> results) {
        if (total > target) {
            return;
        }
        if (total == target) {
            results.add(new ArrayList<>(result));
            return;
        }
        for (int i = index; i < size; i++) {
            /* 当i大于当前索引，且又是和上个值相同的值，则跳过 */
            if (i > index && candidates[i] == candidates[i - 1]) {
                continue;
            }
            result.add(candidates[i]);
            total += candidates[i];
            backTracking(candidates, total, i + 1, result, results);
            result.remove(result.size() - 1);
            total -= candidates[i];
        }
    }

    public static void main(String... args) {
//        int[] array = {10, 1, 2, 7, 6, 1, 5};
        int[] array = {2, 5, 2, 1, 2};
//        int target = 8;
        int target = 5;
        System.out.println(new CombinationSum2().combinationSum2(array, target));
    }
}
