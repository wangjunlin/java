/**
 * 79. 单词搜索
 * 给定一个二维网格和一个单词，找出该单词是否存在于网格中。
 * 单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。
 * 示例:
 * board =
 * [['A','B','C','E'],
 * ['S','F','C','S'],
 * ['A','D','E','E']]
 * 给定 word = "ABCCED", 返回 true
 * 给定 word = "SEE", 返回 true
 * 给定 word = "ABCB", 返回 false
 * 提示：
 * board 和 word 中只包含大写和小写英文字母。
 * 1 <= board.length <= 200
 * 1 <= board[i].length <= 200
 * 1 <= word.length <= 10^3
 * 思路： 回溯算法，找出可能的路径
 */
public class WordSearch {

    public boolean exist(char[][] board, String word) {
        char saver;
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                if (board[i][j] != word.charAt(0)) {
                    continue;
                }
                saver = board[i][j];
                board[i][j] = Character.MIN_VALUE;
                if (backTracking(board, i - 1, j, 1, word)
                        || backTracking(board, i + 1, j, 1, word)
                        || backTracking(board, i, j - 1, 1, word)
                        || backTracking(board, i, j + 1, 1, word)) {
                    return true;
                }
                board[i][j] = saver;
            }
        }
        return false;
    }

    private boolean backTracking(char[][] board, int row, int col, int wordIndex, String target) {
        if (wordIndex == target.length()) {
            return true;
        }
        if (!isValid(board, row, col, wordIndex, target)) {
            return false;
        }
        char saver = board[row][col];
        board[row][col] = Character.MIN_VALUE;
        if (backTracking(board, row - 1, col, wordIndex + 1, target) ||
                backTracking(board, row + 1, col, wordIndex + 1, target) ||
                backTracking(board, row, col - 1, wordIndex + 1, target) ||
                backTracking(board, row, col + 1, wordIndex + 1, target)) {
            return true;
        }
        board[row][col] = saver;
        return false;
    }

    private boolean isValid(char[][] board, int row, int col, int wordIndex, String target) {
        if (row < 0 || row > board.length - 1 || col < 0 || col > board[0].length - 1) {
            return false;
        }
        if (board[row][col] == Character.MIN_VALUE) {
            return false;
        }
        return board[row][col] == target.charAt(wordIndex);
    }

    public static void main(String[] args) {
        char[][] board = {{'A', 'B', 'C', 'E'},
                {'S', 'F', 'C', 'S'},
                {'A', 'D', 'E', 'E'}};
//        String word = "ABCCED";
//        String word = "SEE";
        String word = "ABCB";
        System.out.println(new WordSearch().exist(board, word));
    }
}
