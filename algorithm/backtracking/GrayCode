/**
 * 格雷编码是一个二进制数字系统，在该系统中，两个连续的数值仅有一个位数的差异。（注意，是位中仅有一个差异）
 * 给定一个代表编码总位数的非负整数 n，打印其格雷编码序列。格雷编码序列必须以 0 开头。
 * 输入: 2
 * 输出: [0,1,3,2]
 * 解释:
 * 00 - 0
 * 01 - 1
 * 11 - 3
 * 10 - 2
 * <p>
 * 对于给定的 n，其格雷编码序列并不唯一。
 * 例如，[0,2,3,1] 也是一个有效的格雷编码序列。
 * <p>
 * 00 - 0
 * 10 - 2
 * 11 - 3
 * 01 - 1
 * <p>
 * 给定编码总位数为 n 的格雷编码序列，其长度为 2^n。当 n = 0 时，长度为 2^0 = 1。
 *      因此，当 n = 0 时，其格雷编码序列为 [0]。
 * 思路:
 * 1.(以回溯来做，非公式法) 已知长度为2^n，可以构建一个0到(2^n -1)的数组，从该数组中构建序列，注意开始必须为0(该方式会超时)
 * 2.查看公式，可知G(n) = B(n+1) XOR B(n)
 */
public class GrayCode {
    private int maxLength;
    private boolean isSuccess = false;

    public List<Integer> grayCode(int n) {
        maxLength = (int) Math.pow(2D, n);
        List<Integer> results = new ArrayList<>(maxLength);
        int[] nums = new int[maxLength];
        for (int i = 0; i < maxLength; i++) {
            nums[i] = i;
        }
        results.add(0);
        backTracking(nums, results);
        return results;
    }

    private void backTracking(int[] nums, List<Integer> results) {
        if (results.size() == maxLength) {
            isSuccess = true;
            return;
        }
        for (int i = 1; i < nums.length; i++) {
            if (nums[i] == 0) {
                continue;
            }
            if (!isValid(nums[i], results)) {
                continue;
            }
            // 如果符合条件，即2个连续数值只能有一个位差异
            int saveNum = nums[i];
            nums[i] = 0;
            results.add(saveNum);
            backTracking(nums, results);
            if (isSuccess) {
                return;
            }
            nums[i] = saveNum;
            results.remove(results.size() - 1);
        }
    }

    private boolean isValid(int seq, List<Integer> results) {
        return ((seq ^ results.get(results.size() - 1)) & ((seq ^ results.get(results.size() - 1)) - 1)) == 0;
    }

    public List<Integer> grayCode2(int n) {
        maxLength = (int) Math.pow(2D, n);
        List<Integer> results = new ArrayList<>(maxLength);
        for (int i = 0; i < maxLength; i++) {
            results.add(generateGrayCode(i));
        }
        return results;
    }

    /**
     * Generate gray code
     * G(n) = B(n) XOR B(n+1)
     *
     * @param num binary code
     * @return gray code
     */
    private int generateGrayCode(int num) {
        return num ^ (num >> 1);
    }

    public static void main(String... args) {
//        System.out.println(new GrayCode().grayCode(2));
//       System.out.println(new GrayCode().grayCode(0));
//       System.out.println(new GrayCode().grayCode(5));
//       System.out.println(new GrayCode().grayCode(10));
        System.out.println(new GrayCode().grayCode2(10));
    }
}
