/**
 * 房子的客厅大小为 n x m，为保持极简的风格，需要使用尽可能少的 正方形 瓷砖来铺盖地面。
 * 假设正方形瓷砖的规格不限，边长都是整数。
 * 请你帮设计师计算一下，最少需要用到多少块方形瓷砖？
 * 输入：n = 5, m = 8
 * 输出：5
 * 输入：n = 11, m = 13
 * 输出：6
 * 1 <= n <= 13
 * 1 <= m <= 13
 * <p>
 * 思路: 取房间最小边长为瓷砖最大边长，遍历0-rectangleLength，不断回溯。
 * 1. 从最大瓷砖开始回溯；（经验值）
 * 2. 记录成功的一次最小次数，大幅减少无效回溯；
 * 3. 瓷砖快判，少于剩余空间则直接返回false
 */
public class TilingRectangle {
    // 瓷砖最大边长
    private int rectangleLength = 0;
    // 最小次数
    private int minNum = Integer.MAX_VALUE;
    private int[] fillArray;

    class Point {
        int x = -1;
        int y = -1;
    }

    public int tilingRectangle(int n, int m) {
        rectangleLength = n > m ? m : n;
        fillArray = new int[m];
        Arrays.fill(fillArray, 1);
        // 构建矩形
        int tempNum = 0;
        int[][] house = new int[n][m];
        long start = System.nanoTime();
        backTracking(house, tempNum, m * n);
        long end = System.nanoTime();
        System.out.println(end - start);
        return minNum;
    }

    private void backTracking(int[][] house, int tempNum, int total) {
        if (isFill(house) && (tempNum < minNum)) {
            minNum = tempNum;
            return;
        }
        // 对1到最大边长进行遍历
        Point point = new Point();
        int tempTotal;
//        for (int rectL = 1; rectL <= rectangleLength; rectL++) {
        // 从1到最大长度中间需要消耗大量时间，采用最大长度开始，时间随n,m增大指数级减少，效果更明显
        for (int rectL = rectangleLength; rectL > 0; rectL--) {
            if (!findSpace(house, rectL, point, total)) {
                continue;
            }
            // 剪枝，说明目前的排列是错的，大幅减少时间复杂度
            if (tempNum >= minNum) {
                break;
            }
            tempTotal = rectL * rectL;
            total -= tempTotal;
            // 填充
            fillHouse(house, rectL, point);
            tempNum++;
            // 条件符合，继续回溯
            backTracking(house, tempNum, total);
            // 回退
            regeneration(house, rectL, point);
            tempNum--;
            total += tempTotal;
        }
    }

    /**
     * 查看是否能放得下rect
     *
     * @param house      房子
     * @param rectLength 瓷砖长
     * @return 是否能找到放置位置
     */
    private boolean findSpace(int[][] house, int rectLength, Point point, int total) {
        if (total < (rectLength * rectLength)) {
            return false;
        }
        for (int i = 0; i <= house.length - rectLength; i++) {
            for (int j = 0; j <= house[0].length - rectLength; j++) {
                if (!filter(house, i, j, rectLength)) {
                    continue;
                }
                point.x = i;
                point.y = j;
                return true;
            }
        }
        return false;
    }

    /**
     * 瓷砖对房子进行范围过滤
     *
     * @param house
     * @param low
     * @param col
     * @param rectL
     * @return
     */
    private boolean filter(int[][] house, int low, int col, int rectL) {
        for (int i = low; i < low + rectL; i++) {
            for (int j = col; j < col + rectL; j++) {
                if (house[i][j] == 0) {
                    continue;
                }
                return false;
            }
        }
        return true;
    }

    private void fillHouse(int[][] house, int rectL, Point pos) {
        for (int low = pos.x; low < pos.x + rectL; low++) {
            Arrays.fill(house[low], pos.y, pos.y + rectL, 1);
        }
    }

    private void regeneration(int[][] house, int rectL, Point pos) {
        for (int low = pos.x; low < pos.x + rectL; low++) {
            Arrays.fill(house[low], pos.y, pos.y + rectL, 0);
        }
    }

    private boolean isFill(int[][] house) {
        for (int[] aHouse : house) {
            if (Arrays.equals(aHouse, fillArray)) {
                continue;
            }
            return false;
        }
        return true;
    }

    public static void main(String... args) {
//        System.out.println(new TilingRectangle().tilingRectangle(2, 3));
//        System.out.println(new TilingRectangle().tilingRectangle(5, 8));
        // 时间开销非常大
        System.out.println(new TilingRectangle().tilingRectangle(11, 13));
    }
}
