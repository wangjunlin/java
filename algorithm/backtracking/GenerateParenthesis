/**
 * 给出 n 代表生成括号的对数，请你写出一个函数，使其能够生成所有可能的并且有效的括号组合。
 * 例如，给出 n = 3，生成结果为：
 * <p>
 * [
 * "((()))",
 * "(()())",
 * "(())()",
 * "()(())",
 * "()()()"
 * ]
 * <p>
 * 回溯法: 1.递归搜索 2.解空间
 * 给定了n,解空间为 result[0,1,...,n-1],传入一个空串，对左、右括号分别从起始做递归
 */
public class GenerateParenthesis {

    private int n;
    private List<String> resultList = new ArrayList<>();

    private List<String> generateParenthesis(int n) {
        this.n = n;
        backTracking("", 0, 0, "");
        return resultList;
    }

    /**
     * 回溯，递归形式，不满足条件则返回
     *
     * @param result
     * @param leftNum
     * @param rightNum
     * @param value
     */
    private void backTracking(String result, int leftNum, int rightNum, String value) {
        result += value;
        if (leftNum == n && rightNum == n) {
            resultList.add(result);
            return;
        }
        if (leftNum < rightNum) {
            return;
        }
        if (leftNum > n) {
            return;
        }
        backTracking(result, leftNum + 1, rightNum, "(");
        backTracking(result, leftNum, rightNum + 1, ")");
    }

    public static void main(String... args) {
        GenerateParenthesis parenthesis = new GenerateParenthesis();
        System.out.println(parenthesis.generateParenthesis(3));
        parenthesis.resultList.clear();
        System.out.println(parenthesis.generateParenthesis(1));
    }
}
