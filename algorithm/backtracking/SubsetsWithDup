/**
 * 给定一个可能包含重复元素的整数数组 nums，返回该数组所有可能的子集（幂集）
 * 说明：解集不能包含重复的子集。
 * 输入: [1,2,2]
 * 输出:
 * [
 * [2],
 * [1],
 * [1,2,2],
 * [2,2],
 * [1,2],
 * []
 * ]
 * <p>
 * 无重复结果，则排序；加速，则跳过输入重复元素的回溯
 */
public class SubsetsWithDup {

    private int size;

    public List<List<Integer>> subsetsWithDup(int[] nums) {
        this.size = nums.length;
        List<List<Integer>> results = new ArrayList<>();
        List<Integer> result = new ArrayList<>();
        Arrays.sort(nums);
        backTracking(nums, -1, result, results);
        return results;
    }

    private void backTracking(int[] nums, int index, List<Integer> result, List<List<Integer>> results) {
        if (result.size() == size) {
            return;
        }
        for (int i = index; i < size; i++) {
            if (i == -1) {
                results.add(new ArrayList<>());
                continue;
            }
            if (i > 0 && i > index && nums[i] == nums[i - 1]) {
                continue;
            }
            result.add(nums[i]);
            results.add(new ArrayList<>(result));
            backTracking(nums, i + 1, result, results);
            result.remove(result.size() - 1);
        }
    }

    public static void main(String... args) {
        int[] nums = {4, 4, 4, 1, 4};
        System.out.println(new SubsetsWithDup().subsetsWithDup(nums));
    }
}
