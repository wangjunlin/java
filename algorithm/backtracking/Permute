/**
 * 全排列
 * 给定一个没有重复数字的序列，返回其所有可能的全排列。
 * 输入: [1,2,3]
 * 输出:
 * [[1,2,3],
 * [1,3,2],
 * [2,1,3],
 * [2,3,1],
 * [3,1,2],
 * [3,2,1]]
 * <p>
 * 这里没有剪枝，一路玩到底就行
 */
public class Permute {

    private static final int UNUSED = Integer.MIN_VALUE; // 特殊值

    public List<List<Integer>> permute(int[] nums) {
        List<List<Integer>> results = new ArrayList<>(16);
        List<Integer> result = new ArrayList<>(nums.length);
        backTracking(nums, results, result);
        return results;
    }


    private void backTracking(int[] nums, List<List<Integer>> results, List<Integer> result) {
        if (result.size() == nums.length) {
            results.add(new ArrayList<>(result));
            return;
        }
        int tempValue;
        for (int numsIndex = 0; numsIndex < nums.length; numsIndex++) {
            if (nums[numsIndex] == UNUSED) {
                continue;
            }
            tempValue = nums[numsIndex];
            result.add(nums[numsIndex]);
            nums[numsIndex] = UNUSED;
            backTracking(nums, results, result);
            // reset
            result.remove(result.size() - 1);
            nums[numsIndex] = tempValue;
        }
    }

    public static void main(String... args) {
        Permute permute = new Permute();
        int[] num = {1, 2, 3};
        System.out.println(permute.permute(num));
    }
}
