/**
 * 给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。
 * 输入: n = 4, k = 2
 * 输出:
 * [
 * [2,4],
 * [3,4],
 * [2,3],
 * [1,2],
 * [1,3],
 * [1,4],
 * ]
 * <p>
 * 去结果集重复，则下个回溯判断是否小于上个回溯的值
 */
public class Combine {
    private int size;

    public List<List<Integer>> combine(int n, int k) {
        size = k;
        int[] nums = new int[n];
        for (int i = 0; i < n; i++) {
            nums[i] = i + 1;
        }
        List<Integer> result = new ArrayList<>(k);
        List<List<Integer>> results = new ArrayList<>();
        backTracking(nums, -1, result, results);
        return results;
    }

    private void backTracking(int[] nums, int lastIndex, List<Integer> result, List<List<Integer>> results) {
        if (result.size() == size) {
            results.add(new ArrayList<>(result));
            return;
        }
        int save;
        for (int i = 0; i < nums.length; i++) {
            if (i < lastIndex) {
                continue;
            }
            save = nums[i];
            if (save == 0) {
                continue;
            }
            result.add(save);
            nums[i] = 0;
            backTracking(nums, i, result, results);
            result.remove(result.size() - 1);
            nums[i] = save;
        }
    }

    public static void main(String... args) {
        int n = 40;
        int k = 5;
        System.out.println(new Combine().combine(n, k));
    }
}
