/**
 * 给你一个 m * n 的网格，其中每个单元格不是 0（空）就是 1（障碍物）。每一步，您都可以在空白单元格中上、下、左、右移动。
 * 如果您 最多 可以消除 k 个障碍物，请找出从左上角 (0, 0) 到右下角 (m-1, n-1) 的最短路径，并返回通过该路径所需的步数。如果找不到这样的路径，则返回 -1。
 * 示例 1：
 * 输入：
 * grid = [[0,0,0],
 *  [1,1,0],
 * [0,0,0],
 *  [0,1,1],
 * [0,0,0]],
 * k = 1
 * 输出：6
 * 解释：
 * 不消除任何障碍的最短路径是 10。
 * 消除位置 (3,2) 处的障碍后，最短路径是 6 。该路径是 (0,0) -> (0,1) -> (0,2) -> (1,2) -> (2,2) -> (3,2) -> (4,2).
 * 示例 2：
 * 输入：
 * grid = [[0,1,1],
 *  [1,1,1],
 *  [1,0,0]],
 * k = 1
 * 输出：-1
 * 解释：
 * 我们至少需要消除两个障碍才能找到这样的路径。
 * 提示：
 * grid.length == m
 * grid[0].length == n
 * 1 <= m, n <= 40
 * 1 <= k <= m * n
 * grid[i][j] == 0 or 1
 * grid[0][0] == grid[m-1][n-1] == 0
 * <p>
 * 思路: 回溯走迷宫，上下左右，并加上条件剪枝 m + n - 2
 * 注意点: 剪枝条件m + n - 2非常重要，这是一个标志性最短路径
 * 一般最短路径都是BFS，这里只是利用了测试用例不够
 */
public class ShortestPath {
    private int shortestNum = Integer.MAX_VALUE;
    private static final int PASSED = 2;
    private static final int OBSTACLE_TO_PASSED = 3;

    public int shortestPath(int[][] grid, int k) {
        backTracking(grid, k, 0, 0, 0);
        return shortestNum == Integer.MAX_VALUE ? -1 : shortestNum;
    }

    private void backTracking(int[][] grid, int k, int nowNums, int i, int j) {
        if (i == grid.length - 1 && j == grid[0].length - 1) {
            shortestNum = shortestNum < nowNums ? shortestNum : nowNums;
            return;
        }
        if (shortestNum <= grid.length + grid[0].length - 2) {
            return;
        }
        // 减少无用的道路探索
        if (nowNums >= shortestNum) {
            return;
        }
        // 道路是否能够通过
        if (!valid(grid, k, i, j)) {
            return;
        }
        k = grid[i][j] == OBSTACLE_TO_PASSED ? k - 1 : k;
        // 顺序最重要，时间复杂度极致降低
        backTracking(grid, k, nowNums + 1, i + 1, j); // down
        backTracking(grid, k, nowNums + 1, i, j + 1); // right
        backTracking(grid, k, nowNums + 1, i - 1, j); // up
        backTracking(grid, k, nowNums + 1, i, j - 1); // left
        grid[i][j] = grid[i][j] == OBSTACLE_TO_PASSED ? 1 : 0;
    }

    private boolean valid(int[][] grid, int k, int i, int j) {
        // 越界
        if (i < 0 || i >= grid.length || j >= grid[0].length || j < 0) {
            return false;
        }
        // 是否可以跨越障碍物
        if (grid[i][j] == 1 && k > 0) {
            grid[i][j] = OBSTACLE_TO_PASSED;
            return true;
        }
        // 正常道路则可以走过
        if (grid[i][j] == 0) {
            grid[i][j] = PASSED;
            return true;
        }
        // 其他情况则失败
        return false;
    }

    public static void main(String... args) {
//        int[][] grid = {{0, 0, 0}, {1, 1, 0}, {0, 0, 0}, {0, 1, 1}, {0, 0, 0}};
//        int k = 1; // 6
//        int[][] grid = {{0,1,1},{1,1,1},{1,0,0}}; int k = 1; // -1
        int[][] grid = {{0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 1, 0, 0, 1, 1}, {0, 0, 0, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 0, 1},
                {1, 1, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 1, 0, 0}, {1, 0, 1, 1, 1, 1, 0, 0, 1, 1, 0, 1, 0, 0, 1},
                {1, 0, 0, 0, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1}, {0, 0, 0, 1, 1, 1, 0, 1, 1, 0, 0, 1, 1, 1, 1},
                {0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 1, 1, 0, 1, 1}, {1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0, 0, 1, 1, 0},
                {0, 0, 1, 0, 0, 1, 1, 1, 1, 1, 0, 1, 0, 0, 0}, {0, 0, 0, 1, 1, 0, 0, 1, 1, 1, 1, 1, 1, 0, 0},
                {0, 0, 0, 0, 1, 1, 1, 0, 0, 1, 1, 1, 0, 1, 0}};
        int k = 27;
        long start = System.nanoTime();
        System.out.println(new ShortestPath().shortestPath(grid, k));
        System.out.println(System.nanoTime() - start);
    }
}
