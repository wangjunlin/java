/**
 * 45. 跳跃游戏 II给定一个非负整数数组，你最初位于数组的第一个位置。
 * 数组中的每个元素代表你在该位置可以跳跃的最大长度。
 * 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
 * 示例:
 * 输入: [2,3,1,1,4]
 * 输出: 2
 * 解释: 跳到最后一个位置的最小跳跃数是 2。
 *      从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。
 * 说明:
 * 假设你总是可以到达数组的最后一个位置。
 * 思路 :
 * 动态规划：每一次的和上一次的有关系
 * 自底向上解法: 从尾部开始，计算每个位置最优的解决方案
 * 贪心算法：正向传播，每次从可选择的跳跃点选择一个距离最远的
 */
public class JumpGame2 {

    public int jump(int[] nums) {
        if (nums.length == 1) {
            return 0;
        }
        if (nums.length == 2) {
            return 1;
        }
        int resultCount;
        resultCount = dpByBottomUp(nums);
        return resultCount;
    }

    private int dpByBottomUp(int[] nums) {
        int[] counts = new int[nums.length];
        int gap;
        for (int index = nums.length - 2; index > -1; index--) {
            if (nums[index] >= nums.length - 1 - index) {
                counts[index] = 1;
                continue;
            }
            if (nums[index] == 0) {
                counts[index] = Short.MAX_VALUE;
                continue;
            }
            gap = Integer.MAX_VALUE;
            for (int m = 1; m <= nums[index]; m++) {
                if (counts[index + m] >= gap) {
                    continue;
                }
                gap = counts[index + m];
            }
            counts[index] = gap + 1;
        }
        return counts[0];
    }

    public static void main(String[] args) {
        int[] nums = {2, 3, 1, 1, 4};
//        int[] nums = {2, 3, 0, 1, 4};
//        int[] nums = {5, 9, 3, 2, 1, 0, 2, 3, 3, 1, 0, 0};
        System.out.println(new JumpGame2().jump(nums));
    }
}
