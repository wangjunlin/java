/**
 * 63. 不同路径 II
 * 一个机器人位于一个 m x n 网格的左上角 （起始点在下图中标记为“Start” ）。
 * 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为“Finish”）。
 * 现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？
 * 网格中的障碍物和空位置分别用 1 和 0 来表示。
 * 说明：m 和 n 的值均不超过 100。
 * 示例 1:
 * 输入:
 * [[0,0,0],
 *   [0,1,0],
 *   [0,0,0]]
 * 输出: 2
 * 解释:
 * 3x3 网格的正中间有一个障碍物。
 * 从左上角到右下角一共有 2 条不同的路径：
 * 1. 向右 -> 向右 -> 向下 -> 向下
 * 2. 向下 -> 向下 -> 向右 -> 向右
 * 思路: 只能向右或者向下，且m,n可以很大，无法使用回溯等DFS，采用动态规划
 * 将障碍物先设为一个无干扰的值
 * 1. 自底向上的解法
 * 2. 自顶向下的解法   递归+带记忆
 */
public class UniquePathsII {
    private static final int OBSTACLE = -1;

    public int uniquePathsWithObstacles(int[][] obstacleGrid) {
        processObstacle(obstacleGrid);

//        dpByBottomUp(obstacleGrid);
        dpByTopDown(obstacleGrid);
        // 注意 grid[][] = {{1}}
        return obstacleGrid[0][0] == OBSTACLE ? 0 : obstacleGrid[0][0];
    }

    private void dpByTopDown(int[][] obstacleGrid) {
        RecursiveWithMemo(obstacleGrid, 0, 0);
    }

    private int RecursiveWithMemo(int[][] obstacleGrid, int row, int col) {
        if (row == obstacleGrid.length - 1 && col == obstacleGrid[0].length - 1) {
            return obstacleGrid[row][col] == OBSTACLE ? 0 : (obstacleGrid[row][col] = 1);
        }
        if (row > obstacleGrid.length - 1) {
            return 0;
        }
        if (col > obstacleGrid[0].length - 1) {
            return 0;
        }
        if (obstacleGrid[row][col] == OBSTACLE) {
            return 0;
        }
        if (obstacleGrid[row][col] != 0) {
            return obstacleGrid[row][col];
        }
        int down = RecursiveWithMemo(obstacleGrid, row + 1, col);
        int right = RecursiveWithMemo(obstacleGrid, row, col + 1);
        return obstacleGrid[row][col] = down + right;
    }

    private void dpByBottomUp(int[][] obstacleGrid) {
        int down, right;
        for (int row = obstacleGrid.length - 1; row > -1; row--) {
            for (int col = obstacleGrid[0].length - 1; col > -1; col--) {
                if (obstacleGrid[row][col] == OBSTACLE) {
                    continue;
                }
                if (row + 1 >= obstacleGrid.length && col + 1 >= obstacleGrid[0].length) {
                    obstacleGrid[row][col] = 1;
                    continue;
                }
                if (row + 1 >= obstacleGrid.length) {
                    obstacleGrid[row][col] = obstacleGrid[row][col + 1] == OBSTACLE ? 0 : obstacleGrid[row][col + 1];
                    continue;
                }
                if (col + 1 >= obstacleGrid[0].length) {
                    obstacleGrid[row][col] = obstacleGrid[row + 1][col] == OBSTACLE ? 0 : obstacleGrid[row + 1][col];
                    continue;
                }
                down = obstacleGrid[row + 1][col] == OBSTACLE ? 0 : obstacleGrid[row + 1][col];
                right = obstacleGrid[row][col + 1] == OBSTACLE ? 0 : obstacleGrid[row][col + 1];
                obstacleGrid[row][col] = down + right;
            }
        }
    }

    private void processObstacle(int[][] obstacleGrid) {
        for (int row = 0; row < obstacleGrid.length; row++) {
            for (int col = 0; col < obstacleGrid[0].length; col++) {
                if (obstacleGrid[row][col] == 0) {
                    continue;
                }
                obstacleGrid[row][col] = OBSTACLE;
            }
        }
    }

    public static void main(String[] args) {
//        int[][] obstacleGrid = {{0, 0, 0}, {0, 1, 0}, {0, 0, 0}};
//        int[][] obstacleGrid = {{1}};
        int[][] obstacleGrid = {{0, 0}, {0, 1}};
        System.out.println(new UniquePathsII().uniquePathsWithObstacles(obstacleGrid));
    }
}
