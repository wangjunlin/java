/**
 * 144. 二叉树的前序遍历
 * 给定一个二叉树，返回它的前序遍历。
 * 示例:
 * 输入: [1,null,2,3]
 * 1
 * \
 * 2
 * /
 * 3
 * 输出: [1,2,3]
 * 进阶:递归算法很简单，你可以通过迭代算法完成吗？
 */
public class BinaryTreePreorderTraversal {
    public List<Integer> preorderTraversal(TreeNode root) {
        List<Integer> results = new ArrayList<>();
//        recursiveSearch(root, results);
        iterativeSearch(root, results);
        return results;
    }

    private void recursiveSearch(TreeNode node, List<Integer> results) {
        if (node == null) {
            return;
        }
        results.add(node.val);
        recursiveSearch(node.left, results);
        recursiveSearch(node.right, results);
    }

    private void iterativeSearch(TreeNode root, List<Integer> results) {
        Deque<TreeNode> visitStack = new LinkedList<>();
        TreeNode currNode = root;
        while (currNode != null || !visitStack.isEmpty()) {
            while (currNode != null) {
                results.add(currNode.val);
                visitStack.push(currNode);
                currNode = currNode.left;
            }
            currNode = visitStack.pop();
            currNode = currNode.right;
        }
    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        TreeNode node1 = new TreeNode(2);
        TreeNode node2 = new TreeNode(3);
        root.right = node1;
        node1.left = node2;
        System.out.println(new BinaryTreePreorderTraversal().preorderTraversal(root));
    }
}
