/**
 * 145. 二叉树的后序遍历
 * 给定一个二叉树，返回它的 后序 遍历。
 * 示例:
 * 输入: [1,null,2,3]
 * 1
 * \
 * 2
 * /
 * 3
 * <p>
 * 输出: [3,2,1]
 * 进阶: 递归算法很简单，你可以通过迭代算法完成吗？
 * 思路: 先用常用递归解法，再用栈来解决
 */
public class BinaryTreePostorderTraversal {

    public List<Integer> postorderTraversal(TreeNode root) {
        List<Integer> results = new ArrayList<>();
//        recursive(root, results);
        withoutRecursive(root, results);
        return results;
    }

    private void recursive(TreeNode node, List<Integer> results) {
        if (node == null) {
            return;
        }
        recursive(node.left, results);
        recursive(node.right, results);
        results.add(node.val);
    }

    /**
     * 会对原始数据进行修改，以用来节省空间
     * @param node       TreeNode root
     * @param results    Postorder lists
     */
    private void withoutRecursive(TreeNode node, List<Integer> results) {
        if (node == null) {
            return;
        }
        Deque<TreeNode> nodeDeque = new ArrayDeque<>();
        nodeDeque.push(node);
        while (!nodeDeque.isEmpty()) {
            TreeNode peekNode = nodeDeque.peekFirst();
            if ((peekNode.left == null) && (peekNode.right == null)) {
                results.add(peekNode.val);
                nodeDeque.pop();
                continue;
            }
            if (peekNode.left != null) {
                nodeDeque.push(peekNode.left);
                peekNode.left = null;
                continue;
            }
            nodeDeque.push(peekNode.right);
            peekNode.right = null;
        }
    }

    public static void main(String[] args) {
        // [1,null,2,3]  -> [3,2,1]
        // [1,2,3,4,5,6,7,null,null,8,null,null,9] -> [4,8,5,2,9,6,7,3,1]
        TreeNode root = new TreeNode(1);
        TreeNode node1 = new TreeNode(2);
        TreeNode node2 = new TreeNode(3);
        root.right = node1;
        node1.left = node2;
        System.out.println(new BinaryTreePostorderTraversal().postorderTraversal(root));
    }
}
