/**
 * 94. 二叉树的中序遍历
 * 给定一个二叉树，返回它的中序遍历。
 * 示例:
 *
 * 输入: [1,null,2,3]
 *    1
 *     \
 *      2
 *     /
 *    3
 *
 * 输出: [1,3,2]
 * 进阶:递归算法很简单，你可以通过迭代算法完成吗？
 *
 * 思路: 递归和迭代，时间复杂度On,空间复杂度On
 *   莫里斯算法（线索树）  时间复杂度On，空间复杂度O1
 */
public class BinaryTreeInorderTraversal {

    public List<Integer> inorderTraversal(TreeNode root) {
        List<Integer> results = new ArrayList<>();
//        recursiveSearch(root, results);
//        iterateSearch(root, results);
        morrisTraversal(root, results);
        return results;
    }

    private void recursiveSearch(TreeNode node, List<Integer> results) {
        if (node == null) {
            return;
        }
        recursiveSearch(node.left, results);
        results.add(node.val);
        recursiveSearch(node.right, results);
    }

    private void iterateSearch(TreeNode root, List<Integer> results) {
        if (root == null) {
            return;
        }
        Deque<TreeNode> fatherDeque = new LinkedList<>();
        TreeNode currentNode = root;
        while (currentNode != null || !fatherDeque.isEmpty()) {
            while (currentNode != null) {
                fatherDeque.push(currentNode);
                currentNode = currentNode.left;
            }
            currentNode = fatherDeque.pop();
            results.add(currentNode.val);
            currentNode = currentNode.right;
        }
    }

    private void morrisTraversal(TreeNode root, List<Integer> results) {

    }

    public static void main(String[] args) {
        TreeNode root = new TreeNode(1);
        TreeNode node1 = new TreeNode(2);
        TreeNode node2 = new TreeNode(3);
        root.right = node1;
        node1.left = node2;
        System.out.println(new BinaryTreeInorderTraversal().inorderTraversal(root));
    }
}
