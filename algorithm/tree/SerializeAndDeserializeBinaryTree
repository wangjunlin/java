/**
 * 297. 二叉树的序列化与反序列化
 * 序列化是将一个数据结构或者对象转换为连续的比特位的操作，进而可以将转换后的数据存储在一个文件或者内存中，同时也可以通过网络传输到另一个计算机环境，
 * 采取相反方式重构得到原数据。
 * 请设计一个算法来实现二叉树的序列化与反序列化。这里不限定你的序列 / 反序列化算法执行逻辑，
 * 你只需要保证一个二叉树可以被序列化为一个字符串并且将这个字符串反序列化为原始的树结构。
 * 示例: 
 * 你可以将以下二叉树：
 * 1
 * / \
 * 2   3
 * / \
 * 4   5
 * 序列化为 "[1,2,3,null,null,4,5]"
 * 提示: 这与 LeetCode 目前使用的方式一致，详情请参阅 LeetCode 序列化二叉树的格式。你并非必须采取这种方式，你也可以采用其他的方法解决这个问题。
 * 说明: 不要使用类的成员 / 全局 / 静态变量来存储状态，你的序列化和反序列化算法应该是无状态的。
 * <p>
 * 思路:
 */
public class SerializeAndDeserializeBinaryTree {
    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) {
            val = x;
        }
    }

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if (root == null) {
            return "";
        }
        final TreeNode nullNode = new TreeNode(TreeNode.class.hashCode());
        StringBuilder serializeBuiler = new StringBuilder();
        // Level traversal
        Queue<TreeNode> nodeQueue = new ArrayDeque<>();
        nodeQueue.add(root);
        while (!nodeQueue.isEmpty()) {
            TreeNode popNode = nodeQueue.poll();
            if ((popNode == null) || (popNode.val == TreeNode.class.hashCode())) {
                serializeBuiler.append("null").append(',');
                continue;
            }
            serializeBuiler.append(popNode.val).append(',');
            nodeQueue.add(popNode.left == null ? nullNode : popNode.left);
            nodeQueue.add(popNode.right == null ? nullNode : popNode.right);
        }
        if (serializeBuiler.charAt(serializeBuiler.length() - 1) == ',') {
            serializeBuiler.deleteCharAt(serializeBuiler.length() - 1);
        }
        return serializeBuiler.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if (data.isEmpty()) {
            return null;
        }
        String[] dataNodes = data.split(",");
        if ((dataNodes.length == 0) || (dataNodes[0] == null)) {
            return null;
        }

        final TreeNode root = new TreeNode(Integer.parseInt(dataNodes[0]));
        final Queue<TreeNode> nodeQueue = new ArrayDeque<>();
        nodeQueue.add(root);
        boolean isLeftNode = true;
        TreeNode tempTreeNode;
        for (int i = 1; i < dataNodes.length; i++) {
            TreeNode newNode = dataNodes[i].equals("null") ? null : new TreeNode(Integer.parseInt(dataNodes[i]));
            tempTreeNode = nodeQueue.peek();
            assert tempTreeNode != null;
            if (isLeftNode) {
                isLeftNode = false;
                tempTreeNode.left = newNode;
            } else {
                isLeftNode = true;
                tempTreeNode.right = newNode;
                nodeQueue.poll();
            }
            if (newNode != null) {
                nodeQueue.add(newNode);
            }
        }
        return root;
    }

    public static void main(String[] args) {
        SerializeAndDeserializeBinaryTree t = new SerializeAndDeserializeBinaryTree();
        // [1,2,3,null,null,4,5]
        TreeNode root = new TreeNode(1);
        TreeNode node1 = new TreeNode(2);
        TreeNode node2 = new TreeNode(3);
        TreeNode node3 = new TreeNode(4);
        TreeNode node4 = new TreeNode(5);
        root.left = node1;
        root.right = node2;
        node2.left = node3;
        node2.right = node4;
        System.out.println(t.deserialize(t.serialize(root)));
    }
}
