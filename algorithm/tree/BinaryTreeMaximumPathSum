/**
 * 124. 二叉树中的最大路径和
 * 给定一个非空二叉树，返回其最大路径和。
 * 本题中，路径被定义为一条从树中任意节点出发，达到任意节点的序列。该路径至少包含一个节点，且不一定经过根节点。
 * 示例 1:
 * 输入: [1,2,3]
 * <p>
 * 1
 * / \
 * 2   3
 * 输出: 6
 * 示例 2:
 * 输入: [-10,9,20,null,null,15,7]
 * <p>
 *    -10
 *    / \
 *   9  20
 *     /  \
 *    15   7
 * 输出: 42
 * 思路: 左右子节点只能选择一个而不能选择2个
 * 可以从左边的子节点到右边子节点，即从15到7： 15 + 20 + 7 = 42
 * 对于每个节点，都对左右判断，并加上自身值返回，作为父节点的一个节点值，递归以获取最大路径值
 */
public class BinaryTreeMaximumPathSum {

    public static class TreeNode {
        int val;
        TreeNode left;
        TreeNode right;

        TreeNode(int x) {
            val = x;
        }
    }

    private int maxNodeSum = Integer.MIN_VALUE; // 有的节点只有负数的值，不能设为0

    public int maxPathSum(TreeNode root) {
//        int leftSum = getNodeSum(root.left);
//        int rightSum = getNodeSum(root.right);
//        maxNodeSum = Math.max(maxNodeSum, Math.max(Math.max(root.val + leftSum, root.val + rightSum), root.val + leftSum + rightSum));
        getNodeSum(root);
        return maxNodeSum;
    }

    private int getNodeSum(TreeNode node) {
        if (node == null) {
            return 0;
        }
        int leftSum = getNodeSum(node.left);
        int rightSum = getNodeSum(node.right);
        int nowNodeSum = Math.max(Math.max(leftSum + node.val, node.val + rightSum), node.val);
        maxNodeSum = Math.max(maxNodeSum, Math.max(Math.max(node.val + leftSum, node.val + rightSum), node.val + leftSum + rightSum));
        if (maxNodeSum < nowNodeSum) {
            maxNodeSum = nowNodeSum;
        }
        return nowNodeSum;
    }


    public static void main(String[] args) {
        Integer[] treeNum = {-10, 9, 20, null, null, 15, 7};
        BinaryTreeMaximumPathSum sum = new BinaryTreeMaximumPathSum();
        TreeNode root = new TreeNode(-10);
        TreeNode node1 = new TreeNode(9);
        TreeNode node2 = new TreeNode(20);
        TreeNode node3 = new TreeNode(15);
        TreeNode node4 = new TreeNode(7);
        root.left = node1;
        root.right = node2;
        node2.left = node3;
        node2.right = node4;

        // [2,-1]
        // [-3]
        // [5,4,8,11,null,13,4,7,2,null,null,null,1]
       /* TreeNode root = new TreeNode(5);
        TreeNode node1 = new TreeNode(4);
        TreeNode node2 = new TreeNode(8);
        TreeNode node3 = new TreeNode(11);
        TreeNode node4 = new TreeNode(13);
        TreeNode node5 = new TreeNode(4);
        TreeNode node6 = new TreeNode(7);
        TreeNode node7 = new TreeNode(2);
        TreeNode node8 = new TreeNode(1);
        root.left = node1;
        root.right = node2;
        node1.left = node3;
        node2.left = node4;
        node2.right = node5;
        node3.left = node6;
        node3.right = node7;
        node5.right = node8;*/

        System.out.println(sum.maxPathSum(root));
    }
}
